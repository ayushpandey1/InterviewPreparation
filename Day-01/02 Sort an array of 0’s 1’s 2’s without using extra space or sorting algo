75. Sort Colors(LeetCode)
//Method-1
class Solution {
public:
    void sortColors(vector<int>& nums) {
        //sort(nums.begin(),nums.end());
       // return nums;
        int count0=0,count1=0,count2=0;
        for( int i=0;i<nums.size();i++){
            switch(nums[i]){
                case 0: count0++;
                    break;
                case 1: count1++;
                    break;
                case 2: count2++;
                    break;
            }
        }
        int j=0;
        //cout<<count0<<" "<<count1<<" "<<count2;
        while(count0--){
            nums[j++]=0;
        }
        while(count1--){
            nums[j++]=1;
        }
        while(count2--){
            nums[j++]=2;
        }
    }
};

//Method-2
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int i=0, k=nums.size()-1,j=0;
        for(int i=0;i<=k;i++){
            if(nums[i]==0)
                swap(nums[i],nums[j++]);
            
            else if(nums[i]==2)
                swap(nums[i--],nums[k--]);
            
        }
    }
};
//Method-3
class Solution {
    public:
    void sortColors(vector<int>& nums) 
    {
        int tmp = 0, low = 0, mid = 0, high = nums.size() - 1;
    
        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                tmp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = tmp;
                low++;
                mid++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else if(nums[mid] == 2)
            {
                tmp = nums[high];
                nums[high] = nums[mid];
                nums[mid] = tmp;
                high--;
            }
        }
    }
};

