//Method-1
vector<int> Solution::repeatedNumber(const vector<int> &A) {
    long long int len = A.size(); 
    long long int Sum_N = (len * (len+1) ) /2, Sum_NSq = (len * (len +1) *(2*len +1) )/6; 
    long long int missingNumber=0, repeating=0; 
      
    for(int i=0;i<A.size(); i++){ 
       Sum_N -= (long long int)A[i]; 
       Sum_NSq -= (long long int)A[i]*(long long int)A[i]; 
    } 
      
    missingNumber = (Sum_N + Sum_NSq/Sum_N)/2; 
    repeating= missingNumber - Sum_N; 
    vector <int> ans; 
    ans.push_back(repeating); 
    ans.push_back(missingNumber); 
    return ans; 
      
}

//Method-2
class Solution {
public:
    vector<int> repeatedNumber(const vector<int> &V) {
       long long sum = 0;
       long long squareSum = 0;
       long long temp;
       for (int i = 0; i < V.size(); i++) {
           temp = V[i];
           sum += temp;
           sum -= (i + 1);
           squareSum += (temp * temp);
           squareSum -= ((long long)(i + 1) * (long long)(i + 1));
       }
       // sum = A - B
       // squareSum = A^2 - B^2 = (A - B)(A + B)
       // squareSum / sum = A + B
       squareSum /= sum;

       // Now we have A + B and A - B. Lets figure out A and B now. 
       int A = (int) ((sum + squareSum) / 2);
       int B = squareSum - A;

       vector<int> ret;
       ret.push_back(A);
       ret.push_back(B);
       return ret;
    }
};
//Method-3
vector<int> Solution::repeatedNumber(const vector<int> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int x; int y;
    long long a1; long long b1;
    long long sum=0; long long square_sum=0;
    int n=A.size();
    long long actual_sum=(long long)n*(long long)(n+1)/2;
    long long actual_square_sum=(long long)n*(long long)(n+1)*(long long)(2*n+1)/6; int i;
    
    for(i=0;i<A.size();i++)
    {
        sum=(long long)sum+(long long)A[i]; square_sum=(long long)square_sum+(long long)A[i]*(long long)A[i];
    }
    
    a1=(long long)actual_sum-(long long)sum;    b1=(long long)actual_square_sum-(long long)square_sum;
    x=((long long)b1-(long long)a1*(long long)a1)/(2*a1);  y=(long long)a1+(long long)x;
    
    vector<int> result(2);
    result[0]=x; result[1]=y;
    return result;
}


