//Method-01
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) 
    {
        if(n==0)
            return;
        for(int i=0;i<n;i++)
        {
            nums1[m+i] =nums2[i];
        }
        
        sort(nums1.begin(),nums1.end());
    }
};

//Method-02
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(auto num:nums2)cout<<num<<" ";
        int i = m - 1, j = n - 1, tar = m + n - 1;
        while (j >= 0) {
            nums1[tar--] = i >= 0 && nums1[i] > nums2[j] ? nums1[i--] : nums2[j--];
            
        }
    }
};

//Method-03  BruteForce Solution
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> res;
        int i,j;
        i=j=0;
        while(i < m && j < n){
            if(nums1[i] < nums2[j]){
                res.push_back(nums1[i]);
                i++;
            }
            else
            {
                res.push_back(nums2[j]);
                j++;
            }
        }
        while(i < m){
            res.push_back(nums1[i]);
            i++;
        }
        while(j < n){
            res.push_back(nums2[j]);
            j++;
        }
        nums1 = res;
    }
};
