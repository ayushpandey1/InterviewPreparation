287. Find the Duplicate Number(LeetCode)
//Method-1 O(nlogn)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size()-1;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            if(nums[i]==nums[i+1]){
                return nums[i];
            }
        }
      return nums[n];
    }
};

//Method-2
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = 0, fast = 0;
        while(true) {
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast) {
                break;
            }
        }
        slow = 0;
        while(slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};

//Method-3 BinarySearch O(nlogn)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size()-1;
        int low=1;
        int high=n;
        int mid;
         while(low<high){
             mid=low+(high-low)/2;
             int count=0;
             for(auto num:nums){
                 if(num<=mid)count++;
             }
             if(count>mid)high=mid;
             else low=mid+1;
         }
        
        return low;
    }
};
